@page "/monitor"

@attribute [Authorize]

@using OrderMonitorClient.Services
@using Gateway.Models

@inject OrderMonitorService _orderMonitorService

<PageTitle>Order Monitor</PageTitle>

<MudText Typo="Typo.h4">
    Your processed orders will appear here.
</MudText>

@if (_orders == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="_orders" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<OrderMonitorListModel, object>(x => x.Id)">Order ID</MudTableSortLabel></MudTh>
            <MudTh>Positions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>

            <MudTd DataLabel="Position">
                @foreach (var pos in context.Positions)
                {
                    @(pos.Quantity + "x " + pos.ProductName)
                    <br>
                    @pos.ProductDescription
                    <br><br>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<OrderMonitorListModel>? _orders;

    protected override async Task OnInitializedAsync()
    {
        _orderMonitorService.OrderListChanged += HandleOrderUpdates;

        await _orderMonitorService.InitAsync();

        _orders = await ListOrders();
    }

    private async void HandleOrderUpdates(object sender, OrderEventArgs args)
    {
        Console.WriteLine("###SignalR - order update: {0}", args.Id);

        _orders = await ListOrders();

        StateHasChanged();
    }

    private async Task<List<OrderMonitorListModel>> ListOrders()
    {
        return await _orderMonitorService.ListOrdersAsync();
    }
}