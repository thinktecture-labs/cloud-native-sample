name: "CI/CD: Order Monitor Client"
on:
  push:
    branches:
      - "main"
    paths:
      - "src/OrderMonitorClient/**"
      - "charts/order-monitor-client/**"
      - ".github/workflows/cn.order-monitor-client.*.yml"
  workflow_dispatch:
jobs:
  ci:
    name: "CI: Order Monitor Client"
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME}}.azurecr.io
          username: ${{ secrets.ACR_TOKEN_NAME }}
          password: ${{ secrets.ACR_TOKEN_PASSWORD }}
      - name: Build Docker Image
        run: |
          docker build --build-arg mode=release . -t ${{ secrets.ACR_NAME }}.azurecr.io/order-monitor-client:${{ github.sha }} -t ${{ secrets.ACR_NAME }}.azurecr.io/order-monitor-client:${{ github.ref_name }}-latest
        working-directory: ./src/OrderMonitorClient
      - name: Install Dockle
        run: |
          VERSION=$(
          curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
          grep '"tag_name":' | \
          sed -E 's/.*"v([^"]+)".*/\1/' \
          ) && curl -L -o dockle.tar.gz https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.tar.gz &&  \
          tar zxvf dockle.tar.gz
        working-directory: /tmp
      - name: Save Docker Image
        run: docker save ${{ secrets.ACR_NAME }}.azurecr.io/order-monitor-client:${{ github.sha }} -o order-monitor-client.tar
        working-directory: /tmp
      - name: Scan Docker Image
        id: dockle
        run: |
          ./dockle --accept-key KEY_SHA512 -f json -o /tmp/dockle-results.json --input order-monitor-client.tar > /dev/null
          ./dockle --accept-key KEY_SHA512 -o /tmp/dockle-results.txt --input order-monitor-client.tar > /dev/null
          DOCKLE_RESULT_JSON=$(cat /tmp/dockle-results.json)
          DOCKLE_RESULT=$(cat /tmp/dockle-results.txt)
          
          echo "DOCKLE_RESULT<<EOF" >> $GITHUB_ENV
          echo "$DOCKLE_RESULT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "DOCKLE_RESULT_JSON<<EOF" >> $GITHUB_ENV
          echo "$DOCKLE_RESULT_JSON" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Dockle generated the following results:"
          echo $DOCKLE_RESULT_JSON
        working-directory: /tmp
      - name: Report Vulnerabilities
        if: contains(env.DOCKLE_RESULT, 'WARN') || contains(env.DOCKLE_RESULT, 'FATAL')
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.github_token }}
          title: Dockle report for Order Monitor Client
          body: |
            The container image for Order Monitor Client (`order-monitor-client:${{ github.sha }}`) was scanned during CI for ${{ github.sha }} using dockle.
            
            Please see the findings mentioned below:

            ## Dockle results

            ```json
            ${{ env.DOCKLE_RESULT_JSON }}
            ```
            Container image has **not been pushed** to Azure Container Registry.

          labels: |
            containers
            security
      - name: Fail if Vulnerable
        if: contains(env.DOCKLE_RESULT, 'WARN') || contains(env.DOCKLE_RESULT, 'FATAL')
        run: |
          echo "::error ::Please check scan results (see corresponding issue)"
          exit 1
      - name: Push Docker Image
        if: ${{ success() }}
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/order-monitor-client:${{ github.sha }}
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/order-monitor-client:${{ github.ref_name }}-latest
        working-directory: ./src/OrderMonitorClient
  cd:
    name: "CD: Order Monitor Client"
    runs-on: ubuntu-latest
    needs: ci
    env:
      AKS_NAME: aks-cloud-native-sample
      RG_NAME: rg-cloud-native-sample-develop
      KUBELOGIN_VERSION: v0.0.20
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install Kubelogin
        run: |
          curl -LO "https://github.com/Azure/kubelogin/releases/download/$KUBELOGIN_VERSION/kubelogin-linux-amd64.zip" && \
          sudo unzip -j "kubelogin-linux-amd64.zip" -d /usr/local/bin && \
          rm -f "kubelogin-linux-amd64.zip" && \
          kubelogin --version
      - name: Install Helm3
        uses: azure/setup-helm@v3
      - name: Verify Helm3 installation
        run: helm version
      - name: Azure CLI Login
        uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.TERRAFORM_CLIENT_ID }}","clientSecret":"${{ secrets.TERRAFORM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TERRAFORM_TENANT_ID }}"}'
      - name: AKS Login (non-interactive)
        run: |
          az account set --subscription ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }} -onone && \
          az aks get-credentials -g $RG_NAME -n $AKS_NAME && \
          kubelogin convert-kubeconfig -l azurecli
      - name: Deploy Order Monitor Client
        run: |
          helm upgrade --install "order-monitor-client" ./charts/order-monitor-client \
          -n cloud-native-sample --create-namespace \
          --set image.repository=${{ secrets.ACR_NAME}}.azurecr.io/order-monitor-client \
          --set image.tag=${{ github.sha }}
