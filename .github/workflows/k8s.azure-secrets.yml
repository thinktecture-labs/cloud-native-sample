name: Store sensitive data in AKS
on:
  workflow_dispatch:
concurrency:
  group: terraform
env:
  TERRAFORM_VERSION: 1.3.1
  KUBELOGIN_VERSION: v0.0.20
  SERVICE_BUS_NAME: thinktecturedev
  SERVICE_BUS_AUTHORIZATION_RULE_NAME: DaprCloudNative
  SERVICE_BUS_RESOURCE_GROUP: rg-research
  AKS_NAME: aks-cloud-native-sample
  RG_NAME: 'rg-cloud-native-sample-develop'
jobs:
  infra:
    name: "Automation"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Print Terraform CLI version
        run: terraform version
      - name: Install Kubelogin
        run: |
          curl -LO "https://github.com/Azure/kubelogin/releases/download/$KUBELOGIN_VERSION/kubelogin-linux-amd64.zip"
          sudo unzip -j "kubelogin-linux-amd64.zip" -d /usr/local/bin
          rm -f "kubelogin-linux-amd64.zip"
          kubelogin --version
      - uses: azure/setup-kubectl@v3
        id: install-kubectl

      - name: Azure CLI Login
        uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.TERRAFORM_CLIENT_ID }}","clientSecret":"${{ secrets.TERRAFORM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TERRAFORM_TENANT_ID }}"}'
      - uses: azure/aks-set-context@v3
        with:
          resource-group: 'rg-cloud-native-sample-develop'
          cluster-name: 'aks-cloud-native-sample'
          admin: 'false'
          use-kubelogin: 'true'
      - name: Set KUBE_CONFIG_PATH tp KUBECONFIG
        run: echo "KUBE_CONFIG_PATH=${KUBECONFIG}" >> $GITHUB_ENV
      
      - name: Check Format
        run: terraform fmt -no-color -check
        working-directory: ./iac/azure-secrets
      - name: Initialize Terraform Project
        run: terraform init --upgrade
        env:
          ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}
        working-directory: ./iac/azure-secrets
      - name: Validate Terraform Project
        run: terraform validate -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}
        working-directory: ./iac/azure-secrets
      - name: Terraform Apply
        run: |
          
          export TF_VAR_azure_servicebus_connection_string=$(az servicebus namespace authorization-rule keys list --namespace-name $SERVICE_BUS_NAME -g $SERVICE_BUS_RESOURCE_GROUP -n $SERVICE_BUS_AUTHORIZATION_RULE_NAME --query "primaryConnectionString" -otsv)
          
          export TF_VAR_sql_server_fqdn=$(az sql server list -g $RG_NAME --query "[].fullyQualifiedDomainName" -otsv | head -n1)

          terraform apply -no-color -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}
          TF_VAR_sql_username: ${{ secrets.SQL_SERVER_ADMIN_USERNAME }}
          TF_VAR_sql_password: ${{ secrets.SQL_SERVER_ADMIN_PASSWORD }}
        working-directory: ./iac/azure-secrets

